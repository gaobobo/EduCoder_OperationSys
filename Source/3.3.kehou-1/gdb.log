GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1
Copyright (C) 2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from tools/system...done.
0x0000fff0 in strcmp (cs=0x0 <startup_32>, ct=0x0 <startup_32>)
    at ../include/string.h:96
96	__asm__("cld\n"
Breakpoint 1 at 0x67a7: file init/main.c, line 112.

Breakpoint 1, main () at init/main.c:112
112	{			/* The startup routine assumes (well, ...) this ---Type <return> to continue, or q <return> to quit---
*/
1: current->pid = 0
(gdb) b task1
Breakpoint 2 at 0x7845
(gdb) c
Continuing.

Breakpoint 2, 0x00007845 in task1 ()
1: current->pid = 1
(gdb) c
Continuing.

Breakpoint 2, 0x00007845 in task1 ()
1: current->pid = 1
(gdb) b schedule 
Breakpoint 3 at 0x6d93: file sched.c, line 106.
(gdb) c
Continuing.

Breakpoint 3, schedule () at sched.c:106
106	{
1: current->pid = 1
(gdb) disA[Kas 0x6973
Dump of assembler code for function main:
   0x000067a7 <+0>:	lea    0x4(%esp),%ecx
   0x000067ab <+4>:	and    $0xfffffff0,%esp
   0x000067ae <+7>:	pushl  -0x4(%ecx)
   0x000067b1 <+10>:	push   %ebp
   0x000067b2 <+11>:	mov    %esp,%ebp
   0x000067b4 <+13>:	push   %ebx
   0x000067b5 <+14>:	push   %ecx
   0x000067b6 <+15>:	sub    $0x20,%esp
   0x000067b9 <+18>:	mov    $0x901fc,%eax
   0x000067be <+23>:	movzwl (%eax),%eax
   0x000067c1 <+26>:	movzwl %ax,%eax
   0x000067c4 <+29>:	mov    %eax,0x2440c
   0x000067c9 <+34>:	cld    
   0x000067ca <+35>:	mov    $0x90080,%eax
   0x000067cf <+40>:	mov    (%eax),%edx
   0x000067d1 <+42>:	mov    %edx,0x24620
   0x000067d7 <+48>:	mov    0x4(%eax),%edx
   0x000067da <+51>:	mov    %edx,0x24624
   0x000067e0 <+57>:	mov    0x8(%eax),%edx
   0x000067e3 <+60>:	mov    %edx,0x24628
   0x000067e9 <+66>:	mov    0xc(%eax),%edx
   0x000067ec <+69>:	mov    %edx,0x2462c
---Type <return> to continue, or q <return> to quit---p [K
   0x000067f2 <+75>:	mov    0x10(%eax),%edx
   0x000067f5 <+78>:	mov    %edx,0x24630
   0x000067fb <+84>:	mov    0x14(%eax),%edx
   0x000067fe <+87>:	mov    %edx,0x24634
   0x00006804 <+93>:	mov    0x18(%eax),%edx
   0x00006807 <+96>:	mov    %edx,0x24638
   0x0000680d <+102>:	mov    0x1c(%eax),%eax
   0x00006810 <+105>:	mov    %eax,0x2463c
   0x00006815 <+110>:	mov    $0x90002,%eax
   0x0000681a <+115>:	movzwl (%eax),%eax
   0x0000681d <+118>:	movzwl %ax,%eax
   0x00006820 <+121>:	shl    $0xa,%eax
   0x00006823 <+124>:	add    $0x100000,%eax
   0x00006828 <+129>:	mov    %eax,0x22660
   0x0000682d <+134>:	mov    0x22660,%eax
   0x00006832 <+139>:	and    $0xfffff000,%eax
   0x00006837 <+144>:	mov    %eax,0x22660
   0x0000683c <+149>:	mov    0x22660,%eax
   0x00006841 <+154>:	cmp    $0x1000000,%eax
   0x00006846 <+159>:	jle    0x6852 <main+171>
   0x00006848 <+161>:	movl   $0x1000000,0x22660
   0x00006852 <+171>:	mov    0x22660,%eax
   0x00006857 <+176>:	cmp    $0xc00000,%eax
---Type <return> to continue, or q <return> to quit---
   0x0000685c <+181>:	jle    0x686a <main+195>
   0x0000685e <+183>:	movl   $0x400000,0x22664
   0x00006868 <+193>:	jmp    0x688c <main+229>
   0x0000686a <+195>:	mov    0x22660,%eax
   0x0000686f <+200>:	cmp    $0x600000,%eax
   0x00006874 <+205>:	jle    0x6882 <main+219>
   0x00006876 <+207>:	movl   $0x200000,0x22664
   0x00006880 <+217>:	jmp    0x688c <main+229>
   0x00006882 <+219>:	movl   $0x100000,0x22664
   0x0000688c <+229>:	mov    0x22664,%eax
   0x00006891 <+234>:	mov    %eax,0x22668
   0x00006896 <+239>:	mov    0x22660,%edx
   0x0000689c <+245>:	mov    0x22668,%eax
   0x000068a1 <+250>:	sub    $0x8,%esp
   0x000068a4 <+253>:	push   %edx
   0x000068a5 <+254>:	push   %eax
   0x000068a6 <+255>:	call   0xae79 <mem_init>
   0x000068ab <+260>:	add    $0x10,%esp
   0x000068ae <+263>:	call   0x7d0f <trap_init>
   0x000068b3 <+268>:	call   0x12e75 <blk_dev_init>
   0x000068b8 <+273>:	call   0x15a8e <chr_dev_init>
   0x000068bd <+278>:	call   0x14d73 <tty_init>
   0x000068c2 <+283>:	call   0x6584 <time_init>
---Type <return> to continue, or q <return> to quit---
   0x000068c7 <+288>:	call   0x745f <sched_init>
   0x000068cc <+293>:	mov    0x22664,%eax
   0x000068d1 <+298>:	sub    $0xc,%esp
   0x000068d4 <+301>:	push   %eax
   0x000068d5 <+302>:	call   0xd3e7 <buffer_init>
   0x000068da <+307>:	add    $0x10,%esp
   0x000068dd <+310>:	call   0x1479e <hd_init>
   0x000068e2 <+315>:	call   0x13b35 <floppy_init>
   0x000068e7 <+320>:	sti    
   0x000068e8 <+321>:	mov    %esp,%eax
   0x000068ea <+323>:	push   $0x17
   0x000068ec <+325>:	push   %eax
   0x000068ed <+326>:	pushf  
   0x000068ee <+327>:	push   $0xf
   0x000068f0 <+329>:	push   $0x68f6
   0x000068f5 <+334>:	iret   
   0x000068f6 <+335>:	mov    $0x17,%eax
   0x000068fb <+340>:	mov    %eax,%ds
   0x000068fd <+342>:	mov    %eax,%es
   0x000068ff <+344>:	mov    %eax,%fs
   0x00006901 <+346>:	mov    %eax,%gs
   0x00006903 <+348>:	mov    $0x2,%eax
   0x00006908 <+353>:	int    $0x80
---Type <return> to continue, or q <return> to quit---
   0x0000690a <+355>:	mov    %eax,-0x1c(%ebp)
   0x0000690d <+358>:	cmpl   $0x0,-0x1c(%ebp)
   0x00006911 <+362>:	js     0x6918 <main+369>
   0x00006913 <+364>:	mov    -0x1c(%ebp),%eax
   0x00006916 <+367>:	jmp    0x6927 <main+384>
   0x00006918 <+369>:	mov    -0x1c(%ebp),%eax
   0x0000691b <+372>:	neg    %eax
   0x0000691d <+374>:	mov    %eax,0x26708
   0x00006922 <+379>:	mov    $0xffffffff,%eax
   0x00006927 <+384>:	test   %eax,%eax
   0x00006929 <+386>:	jne    0x69a2 <main+507>
   0x0000692b <+388>:	movl   $0xe,-0xc(%ebp)
   0x00006932 <+395>:	movl   $0x1,-0x20(%ebp)
   0x00006939 <+402>:	mov    -0x20(%ebp),%ecx
   0x0000693c <+405>:	mov    $0x30,%eax
   0x00006941 <+410>:	mov    -0xc(%ebp),%edx
   0x00006944 <+413>:	mov    %edx,%ebx
   0x00006946 <+415>:	int    $0x80
   0x00006948 <+417>:	mov    %eax,-0x24(%ebp)
   0x0000694b <+420>:	cmpl   $0x0,-0x24(%ebp)
   0x0000694f <+424>:	jns    0x695b <main+436>
   0x00006951 <+426>:	mov    -0x24(%ebp),%eax
   0x00006954 <+429>:	neg    %eax
---Type <return> to continue, or q <return> to quit---
   0x00006956 <+431>:	mov    %eax,0x26708
   0x0000695b <+436>:	call   0x7845 <task1>
   0x00006960 <+441>:	movl   $0x1,-0x18(%ebp)
   0x00006967 <+448>:	mov    $0x1b,%eax
   0x0000696c <+453>:	mov    -0x18(%ebp),%edx
   0x0000696f <+456>:	mov    %edx,%ebx
   0x00006971 <+458>:	int    $0x80
   0x00006973 <+460>:	mov    %eax,-0x28(%ebp)
   0x00006976 <+463>:	cmpl   $0x0,-0x28(%ebp)
   0x0000697a <+467>:	jns    0x6986 <main+479>
   0x0000697c <+469>:	mov    -0x28(%ebp),%eax
   0x0000697f <+472>:	neg    %eax
   0x00006981 <+474>:	mov    %eax,0x26708
   0x00006986 <+479>:	mov    $0x1d,%eax
   0x0000698b <+484>:	int    $0x80
   0x0000698d <+486>:	mov    %eax,-0x10(%ebp)
   0x00006990 <+489>:	cmpl   $0x0,-0x10(%ebp)
   0x00006994 <+493>:	jns    0x695b <main+436>
   0x00006996 <+495>:	mov    -0x10(%ebp),%eax
   0x00006999 <+498>:	neg    %eax
   0x0000699b <+500>:	mov    %eax,0x26708
   0x000069a0 <+505>:	jmp    0x695b <main+436>
   0x000069a2 <+507>:	call   0x7823 <task0>
---Type <return> to continue, or q <return> to quit---
   0x000069a7 <+512>:	mov    $0x1d,%eax
   0x000069ac <+517>:	int    $0x80
   0x000069ae <+519>:	mov    %eax,-0x14(%ebp)
   0x000069b1 <+522>:	cmpl   $0x0,-0x14(%ebp)
   0x000069b5 <+526>:	jns    0x69a2 <main+507>
   0x000069b7 <+528>:	mov    -0x14(%ebp),%eax
   0x000069ba <+531>:	neg    %eax
   0x000069bc <+533>:	mov    %eax,0x26708
   0x000069c1 <+538>:	jmp    0x69a2 <main+507>
End of assembler dump.
(gdb) p sys_cAL[K[Kall_table [K[0x1b]
$1 = (fn_ptr) 0x736d <sys_alarm>
(gdb) c
Continuing.

Breakpoint 3, schedule () at sched.c:106
106	{
1: current->pid = 0
(gdb) disads [K[K[Ks 0x69ae
Dump of assembler code for function main:
   0x000067a7 <+0>:	lea    0x4(%esp),%ecx
   0x000067ab <+4>:	and    $0xfffffff0,%esp
   0x000067ae <+7>:	pushl  -0x4(%ecx)
   0x000067b1 <+10>:	push   %ebp
   0x000067b2 <+11>:	mov    %esp,%ebp
   0x000067b4 <+13>:	push   %ebx
   0x000067b5 <+14>:	push   %ecx
   0x000067b6 <+15>:	sub    $0x20,%esp
   0x000067b9 <+18>:	mov    $0x901fc,%eax
   0x000067be <+23>:	movzwl (%eax),%eax
   0x000067c1 <+26>:	movzwl %ax,%eax
   0x000067c4 <+29>:	mov    %eax,0x2440c
   0x000067c9 <+34>:	cld    
   0x000067ca <+35>:	mov    $0x90080,%eax
   0x000067cf <+40>:	mov    (%eax),%edx
   0x000067d1 <+42>:	mov    %edx,0x24620
   0x000067d7 <+48>:	mov    0x4(%eax),%edx
   0x000067da <+51>:	mov    %edx,0x24624
   0x000067e0 <+57>:	mov    0x8(%eax),%edx
   0x000067e3 <+60>:	mov    %edx,0x24628
   0x000067e9 <+66>:	mov    0xc(%eax),%edx
   0x000067ec <+69>:	mov    %edx,0x2462c
---Type <return> to continue, or q <return> to quit---p[K
   0x000067f2 <+75>:	mov    0x10(%eax),%edx
   0x000067f5 <+78>:	mov    %edx,0x24630
   0x000067fb <+84>:	mov    0x14(%eax),%edx
   0x000067fe <+87>:	mov    %edx,0x24634
   0x00006804 <+93>:	mov    0x18(%eax),%edx
   0x00006807 <+96>:	mov    %edx,0x24638
   0x0000680d <+102>:	mov    0x1c(%eax),%eax
   0x00006810 <+105>:	mov    %eax,0x2463c
   0x00006815 <+110>:	mov    $0x90002,%eax
   0x0000681a <+115>:	movzwl (%eax),%eax
   0x0000681d <+118>:	movzwl %ax,%eax
   0x00006820 <+121>:	shl    $0xa,%eax
   0x00006823 <+124>:	add    $0x100000,%eax
   0x00006828 <+129>:	mov    %eax,0x22660
   0x0000682d <+134>:	mov    0x22660,%eax
   0x00006832 <+139>:	and    $0xfffff000,%eax
   0x00006837 <+144>:	mov    %eax,0x22660
   0x0000683c <+149>:	mov    0x22660,%eax
   0x00006841 <+154>:	cmp    $0x1000000,%eax
   0x00006846 <+159>:	jle    0x6852 <main+171>
   0x00006848 <+161>:	movl   $0x1000000,0x22660
   0x00006852 <+171>:	mov    0x22660,%eax
   0x00006857 <+176>:	cmp    $0xc00000,%eax
---Type <return> to continue, or q <return> to quit---
   0x0000685c <+181>:	jle    0x686a <main+195>
   0x0000685e <+183>:	movl   $0x400000,0x22664
   0x00006868 <+193>:	jmp    0x688c <main+229>
   0x0000686a <+195>:	mov    0x22660,%eax
   0x0000686f <+200>:	cmp    $0x600000,%eax
   0x00006874 <+205>:	jle    0x6882 <main+219>
   0x00006876 <+207>:	movl   $0x200000,0x22664
   0x00006880 <+217>:	jmp    0x688c <main+229>
   0x00006882 <+219>:	movl   $0x100000,0x22664
   0x0000688c <+229>:	mov    0x22664,%eax
   0x00006891 <+234>:	mov    %eax,0x22668
   0x00006896 <+239>:	mov    0x22660,%edx
   0x0000689c <+245>:	mov    0x22668,%eax
   0x000068a1 <+250>:	sub    $0x8,%esp
   0x000068a4 <+253>:	push   %edx
   0x000068a5 <+254>:	push   %eax
   0x000068a6 <+255>:	call   0xae79 <mem_init>
   0x000068ab <+260>:	add    $0x10,%esp
   0x000068ae <+263>:	call   0x7d0f <trap_init>
   0x000068b3 <+268>:	call   0x12e75 <blk_dev_init>
   0x000068b8 <+273>:	call   0x15a8e <chr_dev_init>
   0x000068bd <+278>:	call   0x14d73 <tty_init>
   0x000068c2 <+283>:	call   0x6584 <time_init>
---Type <return> to continue, or q <return> to quit---
   0x000068c7 <+288>:	call   0x745f <sched_init>
   0x000068cc <+293>:	mov    0x22664,%eax
   0x000068d1 <+298>:	sub    $0xc,%esp
   0x000068d4 <+301>:	push   %eax
   0x000068d5 <+302>:	call   0xd3e7 <buffer_init>
   0x000068da <+307>:	add    $0x10,%esp
   0x000068dd <+310>:	call   0x1479e <hd_init>
   0x000068e2 <+315>:	call   0x13b35 <floppy_init>
   0x000068e7 <+320>:	sti    
   0x000068e8 <+321>:	mov    %esp,%eax
   0x000068ea <+323>:	push   $0x17
   0x000068ec <+325>:	push   %eax
   0x000068ed <+326>:	pushf  
   0x000068ee <+327>:	push   $0xf
   0x000068f0 <+329>:	push   $0x68f6
   0x000068f5 <+334>:	iret   
   0x000068f6 <+335>:	mov    $0x17,%eax
   0x000068fb <+340>:	mov    %eax,%ds
   0x000068fd <+342>:	mov    %eax,%es
   0x000068ff <+344>:	mov    %eax,%fs
   0x00006901 <+346>:	mov    %eax,%gs
   0x00006903 <+348>:	mov    $0x2,%eax
   0x00006908 <+353>:	int    $0x80
---Type <return> to continue, or q <return> to quit---
   0x0000690a <+355>:	mov    %eax,-0x1c(%ebp)
   0x0000690d <+358>:	cmpl   $0x0,-0x1c(%ebp)
   0x00006911 <+362>:	js     0x6918 <main+369>
   0x00006913 <+364>:	mov    -0x1c(%ebp),%eax
   0x00006916 <+367>:	jmp    0x6927 <main+384>
   0x00006918 <+369>:	mov    -0x1c(%ebp),%eax
   0x0000691b <+372>:	neg    %eax
   0x0000691d <+374>:	mov    %eax,0x26708
   0x00006922 <+379>:	mov    $0xffffffff,%eax
   0x00006927 <+384>:	test   %eax,%eax
   0x00006929 <+386>:	jne    0x69a2 <main+507>
   0x0000692b <+388>:	movl   $0xe,-0xc(%ebp)
   0x00006932 <+395>:	movl   $0x1,-0x20(%ebp)
   0x00006939 <+402>:	mov    -0x20(%ebp),%ecx
   0x0000693c <+405>:	mov    $0x30,%eax
   0x00006941 <+410>:	mov    -0xc(%ebp),%edx
   0x00006944 <+413>:	mov    %edx,%ebx
   0x00006946 <+415>:	int    $0x80
   0x00006948 <+417>:	mov    %eax,-0x24(%ebp)
   0x0000694b <+420>:	cmpl   $0x0,-0x24(%ebp)
   0x0000694f <+424>:	jns    0x695b <main+436>
   0x00006951 <+426>:	mov    -0x24(%ebp),%eax
   0x00006954 <+429>:	neg    %eax
---Type <return> to continue, or q <return> to quit---
   0x00006956 <+431>:	mov    %eax,0x26708
   0x0000695b <+436>:	call   0x7845 <task1>
   0x00006960 <+441>:	movl   $0x1,-0x18(%ebp)
   0x00006967 <+448>:	mov    $0x1b,%eax
   0x0000696c <+453>:	mov    -0x18(%ebp),%edx
   0x0000696f <+456>:	mov    %edx,%ebx
   0x00006971 <+458>:	int    $0x80
   0x00006973 <+460>:	mov    %eax,-0x28(%ebp)
   0x00006976 <+463>:	cmpl   $0x0,-0x28(%ebp)
   0x0000697a <+467>:	jns    0x6986 <main+479>
   0x0000697c <+469>:	mov    -0x28(%ebp),%eax
   0x0000697f <+472>:	neg    %eax
   0x00006981 <+474>:	mov    %eax,0x26708
   0x00006986 <+479>:	mov    $0x1d,%eax
   0x0000698b <+484>:	int    $0x80
   0x0000698d <+486>:	mov    %eax,-0x10(%ebp)
   0x00006990 <+489>:	cmpl   $0x0,-0x10(%ebp)
   0x00006994 <+493>:	jns    0x695b <main+436>
   0x00006996 <+495>:	mov    -0x10(%ebp),%eax
   0x00006999 <+498>:	neg    %eax
   0x0000699b <+500>:	mov    %eax,0x26708
   0x000069a0 <+505>:	jmp    0x695b <main+436>
   0x000069a2 <+507>:	call   0x7823 <task0>
---Type <return> to continue, or q <return> to quit---
   0x000069a7 <+512>:	mov    $0x1d,%eax
   0x000069ac <+517>:	int    $0x80
   0x000069ae <+519>:	mov    %eax,-0x14(%ebp)
   0x000069b1 <+522>:	cmpl   $0x0,-0x14(%ebp)
   0x000069b5 <+526>:	jns    0x69a2 <main+507>
   0x000069b7 <+528>:	mov    -0x14(%ebp),%eax
   0x000069ba <+531>:	neg    %eax
   0x000069bc <+533>:	mov    %eax,0x26708
   0x000069c1 <+538>:	jmp    0x69a2 <main+507>
End of assembler dump.
(gdb) p sys_call_table [K[0x1d]
$2 = (fn_ptr) 0x6e06 <sys_pause>
(gdb) c
Continuing.

Breakpoint 3, schedule () at sched.c:106
106	{
1: current->pid = 1
(gdb) c
Continuing.

Breakpoint 3, schedule () at sched.c:106
106	{
1: current->pid = 0
(gdb) c
Continuing.

Breakpoint 3, schedule () at sched.c:106
106	{
1: current->pid = 1
(gdb) c
Continuing.

Breakpoint 3, schedule () at sched.c:106
106	{
1: current->pid = 0
(gdb) c
Continuing.

Breakpoint 2, 0x00007845 in task1 ()
1: current->pid = 1
(gdb) 